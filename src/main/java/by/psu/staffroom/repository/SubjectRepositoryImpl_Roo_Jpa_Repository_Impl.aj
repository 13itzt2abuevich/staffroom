// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package by.psu.staffroom.repository;

import by.psu.staffroom.domain.QSubject;
import by.psu.staffroom.domain.Subject;
import by.psu.staffroom.repository.SubjectRepositoryCustom;
import by.psu.staffroom.repository.SubjectRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

privileged aspect SubjectRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: SubjectRepositoryImpl implements SubjectRepositoryCustom;
    
    declare @type: SubjectRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String SubjectRepositoryImpl.NAME = "name";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Subject> SubjectRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QSubject subject = QSubject.subject;
        
        JPQLQuery<Subject> query = from(subject);
        
        Path<?>[] paths = new Path<?>[] {subject.name};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NAME, subject.name);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, subject);
    }
    
}
