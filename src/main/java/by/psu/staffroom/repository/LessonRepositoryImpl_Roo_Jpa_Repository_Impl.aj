// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package by.psu.staffroom.repository;

import by.psu.staffroom.domain.Clazz;
import by.psu.staffroom.domain.Instructor;
import by.psu.staffroom.domain.Lesson;
import by.psu.staffroom.domain.Period;
import by.psu.staffroom.domain.QLesson;
import by.psu.staffroom.domain.Room;
import by.psu.staffroom.domain.Subject;
import by.psu.staffroom.repository.LessonRepositoryCustom;
import by.psu.staffroom.repository.LessonRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect LessonRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: LessonRepositoryImpl implements LessonRepositoryCustom;
    
    declare @type: LessonRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LessonRepositoryImpl.DAY = "day";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LessonRepositoryImpl.INSTRUCTOR = "instructor";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LessonRepositoryImpl.ROOM = "room";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LessonRepositoryImpl.SUBJECT = "subject";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LessonRepositoryImpl.CLAZZ = "clazz";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LessonRepositoryImpl.PERIOD = "period";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Lesson> LessonRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QLesson lesson = QLesson.lesson;
        
        JPQLQuery<Lesson> query = from(lesson);
        
        Path<?>[] paths = new Path<?>[] {lesson.day,lesson.instructor,lesson.room,lesson.subject,lesson.clazz,lesson.period};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(DAY, lesson.day)
			.map(INSTRUCTOR, lesson.instructor)
			.map(ROOM, lesson.room)
			.map(SUBJECT, lesson.subject)
			.map(CLAZZ, lesson.clazz)
			.map(PERIOD, lesson.period);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, lesson);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param clazz
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Lesson> LessonRepositoryImpl.findByClazz(Clazz clazz, GlobalSearch globalSearch, Pageable pageable) {
        
        QLesson lesson = QLesson.lesson;
        
        JPQLQuery<Lesson> query = from(lesson);
        
        Assert.notNull(clazz, "clazz is required");
        
        query.where(lesson.clazz.eq(clazz));
        Path<?>[] paths = new Path<?>[] {lesson.day,lesson.instructor,lesson.room,lesson.subject,lesson.clazz,lesson.period};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(DAY, lesson.day)
			.map(INSTRUCTOR, lesson.instructor)
			.map(ROOM, lesson.room)
			.map(SUBJECT, lesson.subject)
			.map(CLAZZ, lesson.clazz)
			.map(PERIOD, lesson.period);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, lesson);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param instructor
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Lesson> LessonRepositoryImpl.findByInstructor(Instructor instructor, GlobalSearch globalSearch, Pageable pageable) {
        
        QLesson lesson = QLesson.lesson;
        
        JPQLQuery<Lesson> query = from(lesson);
        
        Assert.notNull(instructor, "instructor is required");
        
        query.where(lesson.instructor.eq(instructor));
        Path<?>[] paths = new Path<?>[] {lesson.day,lesson.instructor,lesson.room,lesson.subject,lesson.clazz,lesson.period};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(DAY, lesson.day)
			.map(INSTRUCTOR, lesson.instructor)
			.map(ROOM, lesson.room)
			.map(SUBJECT, lesson.subject)
			.map(CLAZZ, lesson.clazz)
			.map(PERIOD, lesson.period);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, lesson);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param period
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Lesson> LessonRepositoryImpl.findByPeriod(Period period, GlobalSearch globalSearch, Pageable pageable) {
        
        QLesson lesson = QLesson.lesson;
        
        JPQLQuery<Lesson> query = from(lesson);
        
        Assert.notNull(period, "period is required");
        
        query.where(lesson.period.eq(period));
        Path<?>[] paths = new Path<?>[] {lesson.day,lesson.instructor,lesson.room,lesson.subject,lesson.clazz,lesson.period};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(DAY, lesson.day)
			.map(INSTRUCTOR, lesson.instructor)
			.map(ROOM, lesson.room)
			.map(SUBJECT, lesson.subject)
			.map(CLAZZ, lesson.clazz)
			.map(PERIOD, lesson.period);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, lesson);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param room
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Lesson> LessonRepositoryImpl.findByRoom(Room room, GlobalSearch globalSearch, Pageable pageable) {
        
        QLesson lesson = QLesson.lesson;
        
        JPQLQuery<Lesson> query = from(lesson);
        
        Assert.notNull(room, "room is required");
        
        query.where(lesson.room.eq(room));
        Path<?>[] paths = new Path<?>[] {lesson.day,lesson.instructor,lesson.room,lesson.subject,lesson.clazz,lesson.period};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(DAY, lesson.day)
			.map(INSTRUCTOR, lesson.instructor)
			.map(ROOM, lesson.room)
			.map(SUBJECT, lesson.subject)
			.map(CLAZZ, lesson.clazz)
			.map(PERIOD, lesson.period);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, lesson);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param subject
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Lesson> LessonRepositoryImpl.findBySubject(Subject subject, GlobalSearch globalSearch, Pageable pageable) {
        
        QLesson lesson = QLesson.lesson;
        
        JPQLQuery<Lesson> query = from(lesson);
        
        Assert.notNull(subject, "subject is required");
        
        query.where(lesson.subject.eq(subject));
        Path<?>[] paths = new Path<?>[] {lesson.day,lesson.instructor,lesson.room,lesson.subject,lesson.clazz,lesson.period};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(DAY, lesson.day)
			.map(INSTRUCTOR, lesson.instructor)
			.map(ROOM, lesson.room)
			.map(SUBJECT, lesson.subject)
			.map(CLAZZ, lesson.clazz)
			.map(PERIOD, lesson.period);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, lesson);
    }
    
}
