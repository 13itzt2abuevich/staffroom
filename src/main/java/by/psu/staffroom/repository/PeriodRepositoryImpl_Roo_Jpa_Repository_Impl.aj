// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package by.psu.staffroom.repository;

import by.psu.staffroom.domain.Period;
import by.psu.staffroom.domain.QPeriod;
import by.psu.staffroom.repository.PeriodRepositoryCustom;
import by.psu.staffroom.repository.PeriodRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

privileged aspect PeriodRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: PeriodRepositoryImpl implements PeriodRepositoryCustom;
    
    declare @type: PeriodRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String PeriodRepositoryImpl.ORDINAL = "ordinal";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String PeriodRepositoryImpl.START_TIME = "startTime";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String PeriodRepositoryImpl.END_TIME = "endTime";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Period> PeriodRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QPeriod period = QPeriod.period;
        
        JPQLQuery<Period> query = from(period);
        
        Path<?>[] paths = new Path<?>[] {period.ordinal,period.startTime,period.endTime};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(ORDINAL, period.ordinal)
			.map(START_TIME, period.startTime)
			.map(END_TIME, period.endTime);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, period);
    }
    
}
