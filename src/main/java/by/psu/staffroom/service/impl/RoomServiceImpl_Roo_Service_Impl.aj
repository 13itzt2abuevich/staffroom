// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package by.psu.staffroom.service.impl;

import by.psu.staffroom.domain.Lesson;
import by.psu.staffroom.domain.Room;
import by.psu.staffroom.repository.RoomRepository;
import by.psu.staffroom.service.api.LessonService;
import by.psu.staffroom.service.impl.RoomServiceImpl;
import io.springlets.data.domain.GlobalSearch;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect RoomServiceImpl_Roo_Service_Impl {
    
    declare @type: RoomServiceImpl: @Service;
    
    declare @type: RoomServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private RoomRepository RoomServiceImpl.roomRepository;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private LessonService RoomServiceImpl.lessonService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param roomRepository
     * @param lessonService
     */
    @Autowired
    public RoomServiceImpl.new(RoomRepository roomRepository, @Lazy LessonService lessonService) {
        setRoomRepository(roomRepository);
        setLessonService(lessonService);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return RoomRepository
     */
    public RoomRepository RoomServiceImpl.getRoomRepository() {
        return roomRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param roomRepository
     */
    public void RoomServiceImpl.setRoomRepository(RoomRepository roomRepository) {
        this.roomRepository = roomRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return LessonService
     */
    public LessonService RoomServiceImpl.getLessonService() {
        return lessonService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param lessonService
     */
    public void RoomServiceImpl.setLessonService(LessonService lessonService) {
        this.lessonService = lessonService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param room
     * @param lessonsToAdd
     * @return Room
     */
    @Transactional
    public Room RoomServiceImpl.addToLessons(Room room, Iterable<Long> lessonsToAdd) {
        List<Lesson> lessons = getLessonService().findAll(lessonsToAdd);
        room.addToLessons(lessons);
        return getRoomRepository().save(room);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param room
     * @param lessonsToRemove
     * @return Room
     */
    @Transactional
    public Room RoomServiceImpl.removeFromLessons(Room room, Iterable<Long> lessonsToRemove) {
        List<Lesson> lessons = getLessonService().findAll(lessonsToRemove);
        room.removeFromLessons(lessons);
        return getRoomRepository().save(room);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param room
     * @param lessons
     * @return Room
     */
    @Transactional
    public Room RoomServiceImpl.setLessons(Room room, Iterable<Long> lessons) {
        List<Lesson> items = getLessonService().findAll(lessons);
        Set<Lesson> currents = room.getLessons();
        Set<Lesson> toRemove = new HashSet<Lesson>();
        for (Iterator<Lesson> iterator = currents.iterator(); iterator.hasNext();) {
            Lesson nextLesson = iterator.next();
            if (items.contains(nextLesson)) {
                items.remove(nextLesson);
            } else {
                toRemove.add(nextLesson);
            }
        }
        room.removeFromLessons(toRemove);
        room.addToLessons(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        room.setVersion(room.getVersion() + 1);
        return getRoomRepository().save(room);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param room
     */
    @Transactional
    public void RoomServiceImpl.delete(Room room) {
        // Clear bidirectional one-to-many parent relationship with Lesson
        for (Lesson item : room.getLessons()) {
            item.setRoom(null);
        }
        
        getRoomRepository().delete(room);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<Room> RoomServiceImpl.save(Iterable<Room> entities) {
        return getRoomRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void RoomServiceImpl.delete(Iterable<Long> ids) {
        List<Room> toDelete = getRoomRepository().findAll(ids);
        getRoomRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return Room
     */
    @Transactional
    public Room RoomServiceImpl.save(Room entity) {
        return getRoomRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Room
     */
    public Room RoomServiceImpl.findOne(Long id) {
        return getRoomRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Room
     */
    public Room RoomServiceImpl.findOneForUpdate(Long id) {
        return getRoomRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<Room> RoomServiceImpl.findAll(Iterable<Long> ids) {
        return getRoomRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<Room> RoomServiceImpl.findAll() {
        return getRoomRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long RoomServiceImpl.count() {
        return getRoomRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Room> RoomServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getRoomRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Room> RoomServiceImpl.getEntityType() {
        return Room.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> RoomServiceImpl.getIdType() {
        return Long.class;
    }
    
}
