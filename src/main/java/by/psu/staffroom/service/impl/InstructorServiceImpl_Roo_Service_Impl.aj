// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package by.psu.staffroom.service.impl;

import by.psu.staffroom.domain.Instructor;
import by.psu.staffroom.domain.Lesson;
import by.psu.staffroom.repository.InstructorRepository;
import by.psu.staffroom.service.api.LessonService;
import by.psu.staffroom.service.impl.InstructorServiceImpl;
import io.springlets.data.domain.GlobalSearch;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect InstructorServiceImpl_Roo_Service_Impl {
    
    declare @type: InstructorServiceImpl: @Service;
    
    declare @type: InstructorServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private InstructorRepository InstructorServiceImpl.instructorRepository;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private LessonService InstructorServiceImpl.lessonService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param instructorRepository
     * @param lessonService
     */
    @Autowired
    public InstructorServiceImpl.new(InstructorRepository instructorRepository, @Lazy LessonService lessonService) {
        setInstructorRepository(instructorRepository);
        setLessonService(lessonService);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return InstructorRepository
     */
    public InstructorRepository InstructorServiceImpl.getInstructorRepository() {
        return instructorRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param instructorRepository
     */
    public void InstructorServiceImpl.setInstructorRepository(InstructorRepository instructorRepository) {
        this.instructorRepository = instructorRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return LessonService
     */
    public LessonService InstructorServiceImpl.getLessonService() {
        return lessonService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param lessonService
     */
    public void InstructorServiceImpl.setLessonService(LessonService lessonService) {
        this.lessonService = lessonService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param instructor
     * @param lessonsToAdd
     * @return Instructor
     */
    @Transactional
    public Instructor InstructorServiceImpl.addToLessons(Instructor instructor, Iterable<Long> lessonsToAdd) {
        List<Lesson> lessons = getLessonService().findAll(lessonsToAdd);
        instructor.addToLessons(lessons);
        return getInstructorRepository().save(instructor);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param instructor
     * @param lessonsToRemove
     * @return Instructor
     */
    @Transactional
    public Instructor InstructorServiceImpl.removeFromLessons(Instructor instructor, Iterable<Long> lessonsToRemove) {
        List<Lesson> lessons = getLessonService().findAll(lessonsToRemove);
        instructor.removeFromLessons(lessons);
        return getInstructorRepository().save(instructor);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param instructor
     * @param lessons
     * @return Instructor
     */
    @Transactional
    public Instructor InstructorServiceImpl.setLessons(Instructor instructor, Iterable<Long> lessons) {
        List<Lesson> items = getLessonService().findAll(lessons);
        Set<Lesson> currents = instructor.getLessons();
        Set<Lesson> toRemove = new HashSet<Lesson>();
        for (Iterator<Lesson> iterator = currents.iterator(); iterator.hasNext();) {
            Lesson nextLesson = iterator.next();
            if (items.contains(nextLesson)) {
                items.remove(nextLesson);
            } else {
                toRemove.add(nextLesson);
            }
        }
        instructor.removeFromLessons(toRemove);
        instructor.addToLessons(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        instructor.setVersion(instructor.getVersion() + 1);
        return getInstructorRepository().save(instructor);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param instructor
     */
    @Transactional
    public void InstructorServiceImpl.delete(Instructor instructor) {
        // Clear bidirectional one-to-many parent relationship with Lesson
        for (Lesson item : instructor.getLessons()) {
            item.setInstructor(null);
        }
        
        getInstructorRepository().delete(instructor);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<Instructor> InstructorServiceImpl.save(Iterable<Instructor> entities) {
        return getInstructorRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void InstructorServiceImpl.delete(Iterable<Long> ids) {
        List<Instructor> toDelete = getInstructorRepository().findAll(ids);
        getInstructorRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return Instructor
     */
    @Transactional
    public Instructor InstructorServiceImpl.save(Instructor entity) {
        return getInstructorRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Instructor
     */
    public Instructor InstructorServiceImpl.findOne(Long id) {
        return getInstructorRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Instructor
     */
    public Instructor InstructorServiceImpl.findOneForUpdate(Long id) {
        return getInstructorRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<Instructor> InstructorServiceImpl.findAll(Iterable<Long> ids) {
        return getInstructorRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<Instructor> InstructorServiceImpl.findAll() {
        return getInstructorRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long InstructorServiceImpl.count() {
        return getInstructorRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Instructor> InstructorServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getInstructorRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Instructor> InstructorServiceImpl.getEntityType() {
        return Instructor.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> InstructorServiceImpl.getIdType() {
        return Long.class;
    }
    
}
