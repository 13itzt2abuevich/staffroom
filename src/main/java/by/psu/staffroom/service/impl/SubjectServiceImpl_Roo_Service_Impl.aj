// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package by.psu.staffroom.service.impl;

import by.psu.staffroom.domain.Lesson;
import by.psu.staffroom.domain.Subject;
import by.psu.staffroom.repository.SubjectRepository;
import by.psu.staffroom.service.api.LessonService;
import by.psu.staffroom.service.impl.SubjectServiceImpl;
import io.springlets.data.domain.GlobalSearch;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect SubjectServiceImpl_Roo_Service_Impl {
    
    declare @type: SubjectServiceImpl: @Service;
    
    declare @type: SubjectServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private SubjectRepository SubjectServiceImpl.subjectRepository;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private LessonService SubjectServiceImpl.lessonService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param subjectRepository
     * @param lessonService
     */
    @Autowired
    public SubjectServiceImpl.new(SubjectRepository subjectRepository, @Lazy LessonService lessonService) {
        setSubjectRepository(subjectRepository);
        setLessonService(lessonService);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return SubjectRepository
     */
    public SubjectRepository SubjectServiceImpl.getSubjectRepository() {
        return subjectRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param subjectRepository
     */
    public void SubjectServiceImpl.setSubjectRepository(SubjectRepository subjectRepository) {
        this.subjectRepository = subjectRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return LessonService
     */
    public LessonService SubjectServiceImpl.getLessonService() {
        return lessonService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param lessonService
     */
    public void SubjectServiceImpl.setLessonService(LessonService lessonService) {
        this.lessonService = lessonService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param subject
     * @param lessonsToAdd
     * @return Subject
     */
    @Transactional
    public Subject SubjectServiceImpl.addToLessons(Subject subject, Iterable<Long> lessonsToAdd) {
        List<Lesson> lessons = getLessonService().findAll(lessonsToAdd);
        subject.addToLessons(lessons);
        return getSubjectRepository().save(subject);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param subject
     * @param lessonsToRemove
     * @return Subject
     */
    @Transactional
    public Subject SubjectServiceImpl.removeFromLessons(Subject subject, Iterable<Long> lessonsToRemove) {
        List<Lesson> lessons = getLessonService().findAll(lessonsToRemove);
        subject.removeFromLessons(lessons);
        return getSubjectRepository().save(subject);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param subject
     * @param lessons
     * @return Subject
     */
    @Transactional
    public Subject SubjectServiceImpl.setLessons(Subject subject, Iterable<Long> lessons) {
        List<Lesson> items = getLessonService().findAll(lessons);
        Set<Lesson> currents = subject.getLessons();
        Set<Lesson> toRemove = new HashSet<Lesson>();
        for (Iterator<Lesson> iterator = currents.iterator(); iterator.hasNext();) {
            Lesson nextLesson = iterator.next();
            if (items.contains(nextLesson)) {
                items.remove(nextLesson);
            } else {
                toRemove.add(nextLesson);
            }
        }
        subject.removeFromLessons(toRemove);
        subject.addToLessons(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        subject.setVersion(subject.getVersion() + 1);
        return getSubjectRepository().save(subject);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param subject
     */
    @Transactional
    public void SubjectServiceImpl.delete(Subject subject) {
        // Clear bidirectional one-to-many parent relationship with Lesson
        for (Lesson item : subject.getLessons()) {
            item.setSubject(null);
        }
        
        getSubjectRepository().delete(subject);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<Subject> SubjectServiceImpl.save(Iterable<Subject> entities) {
        return getSubjectRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void SubjectServiceImpl.delete(Iterable<Long> ids) {
        List<Subject> toDelete = getSubjectRepository().findAll(ids);
        getSubjectRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return Subject
     */
    @Transactional
    public Subject SubjectServiceImpl.save(Subject entity) {
        return getSubjectRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Subject
     */
    public Subject SubjectServiceImpl.findOne(Long id) {
        return getSubjectRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Subject
     */
    public Subject SubjectServiceImpl.findOneForUpdate(Long id) {
        return getSubjectRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<Subject> SubjectServiceImpl.findAll(Iterable<Long> ids) {
        return getSubjectRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<Subject> SubjectServiceImpl.findAll() {
        return getSubjectRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long SubjectServiceImpl.count() {
        return getSubjectRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Subject> SubjectServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getSubjectRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Subject> SubjectServiceImpl.getEntityType() {
        return Subject.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> SubjectServiceImpl.getIdType() {
        return Long.class;
    }
    
}
